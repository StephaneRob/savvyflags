diff --git a/.dialyzer_ignore.exs b/.dialyzer_ignore.exs
new file mode 100644
index 0000000..fe51488
--- /dev/null
+++ b/.dialyzer_ignore.exs
@@ -0,0 +1 @@
+[]
diff --git a/lib/savvy_flags/features.ex b/lib/savvy_flags/features.ex
index 12a55ce..0140dc6 100644
--- a/lib/savvy_flags/features.ex
+++ b/lib/savvy_flags/features.ex
@@ -34,9 +34,10 @@ defmodule SavvyFlags.Features do
   defp list_features_query(filters) do
     query =
       from f in Feature,
-        order_by: [desc: f.inserted_at],
+        order_by: [desc: f.revision],
         join: p in assoc(f, :project),
-        preload: [stats: :environment]
+        preload: [stats: :environment],
+        distinct: f.key
 
     where(query, [f, p], ^filters(filters))
   end
@@ -54,9 +55,10 @@ defmodule SavvyFlags.Features do
         left_join: u in assoc(f, :users),
         join: p in assoc(f, :project),
         left_join: up in assoc(p, :users),
-        order_by: [desc: f.inserted_at],
+        order_by: [desc: f.revision],
         where: u.id == ^user_id or up.id == ^user_id,
-        preload: [stats: :environment]
+        preload: [stats: :environment],
+        distinct: f.key
 
     where(query, [f], ^filters(filters))
   end
@@ -108,7 +110,7 @@ defmodule SavvyFlags.Features do
     q =
       from f in Feature,
         where: f.project_id in ^project_ids,
-        where: is_nil(f.archived_at),
+        where: is_nil(f.archived_at) and f.status == :published,
         where: ^environment_id in f.environments_enabled,
         preload: [rules: ^rule_query]
 
@@ -119,11 +121,13 @@ defmodule SavvyFlags.Features do
     query =
       from f in Feature,
         where: f.reference == ^reference,
+        order_by: [desc: f.revision],
         preload: [
           :environments,
           rules: [rule_conditions: :attribute],
           stats: :environment
-        ]
+        ],
+        limit: 1
 
     Repo.one!(query)
   end
@@ -232,7 +236,7 @@ defmodule SavvyFlags.Features do
       |> Repo.update()
 
     case response do
-      {:ok, rule} ->
+      {:ok, %{rule: rule}} ->
         SavvyFlags.FeatureCache.reset(rule.feature)
         response
 
diff --git a/lib/savvy_flags/features/feature.ex b/lib/savvy_flags/features/feature.ex
index 1822d7e..efce4a9 100644
--- a/lib/savvy_flags/features/feature.ex
+++ b/lib/savvy_flags/features/feature.ex
@@ -1,18 +1,17 @@
 defmodule SavvyFlags.Features.Feature do
   use Ecto.Schema
-  import SavvyFlags.Fields
   import Ecto.Changeset
   alias SavvyFlags.Features.FeatureValue
   alias SavvyFlags.Features.FormatValidator
 
   @derive {Phoenix.Param, key: :reference}
   schema "features" do
-    prefixed_reference :feature
+    field :reference, :string
     field :key, :string
     field :description, :string
     field :environments_enabled, {:array, :integer}, default: []
     field :archived_at, :utc_datetime
-    field :status, Ecto.Enum, values: [:active, :draft], default: :draft
+    field :status, Ecto.Enum, values: [:published, :draft, :unpublished], default: :draft
     field :revision, :integer, default: 0
 
     embeds_one :default_value, FeatureValue, on_replace: :delete
@@ -34,6 +33,7 @@ defmodule SavvyFlags.Features.Feature do
     feature
     |> changeset(attrs)
     |> validate_key_format()
+    |> set_reference()
   end
 
   @doc false
@@ -41,12 +41,15 @@ defmodule SavvyFlags.Features.Feature do
     feature
     |> cast(attrs, [
       :key,
+      :reference,
       :description,
       :project_id,
       :environments_enabled,
       :archived_at,
       :created_by_id,
-      :updated_by_id
+      :updated_by_id,
+      :status,
+      :revision
     ])
     |> cast_embed(:default_value, with: &FeatureValue.changeset/2)
     |> validate_length(:description, max: 150)
@@ -74,4 +77,11 @@ defmodule SavvyFlags.Features.Feature do
       {:error, _} -> add_error(changeset, :key, "Key must match the format: #{format}")
     end
   end
+
+  defp set_reference(changeset) do
+    case get_field(changeset, :reference) do
+      nil -> put_change(changeset, :reference, SavvyFlags.PrefixedId.generate(:feature))
+      _ -> changeset
+    end
+  end
 end
diff --git a/lib/savvy_flags/features/revisions.ex b/lib/savvy_flags/features/revisions.ex
new file mode 100644
index 0000000..5069bcf
--- /dev/null
+++ b/lib/savvy_flags/features/revisions.ex
@@ -0,0 +1,204 @@
+defmodule SavvyFlags.Features.Revisions do
+  @dialyzer {:nowarn_function, start_revision: 1, publish_feature: 1, get_initial_feature: 2}
+
+  import Ecto.Query
+  alias Ecto.Multi
+  alias SavvyFlags.Repo
+  alias SavvyFlags.Features
+  alias SavvyFlags.Features.Rule
+
+  def update_feature_with_revision(feature, attrs) do
+    attrs
+    |> Map.put("feature_id", feature.id)
+    |> start_revision()
+    |> Multi.update(:feature, fn %{
+                                   revision: revision,
+                                   initial_feature: initial_feature
+                                 } ->
+      if revision do
+        Features.change_feature(revision, attrs)
+      else
+        Features.change_feature(initial_feature, attrs)
+      end
+    end)
+    |> Repo.transact()
+  end
+
+  def create_rule_with_revision(attrs) do
+    rule = Repo.preload(%Rule{}, :rule_conditions)
+
+    attrs
+    |> start_revision()
+    |> update_attrs(attrs)
+    |> Multi.insert(:rule, fn %{update_attrs: attrs} ->
+      Rule.changeset(rule, attrs)
+    end)
+    |> Repo.transact()
+  end
+
+  def update_rule_with_revision(rule, attrs \\ %{}) do
+    rule =
+      Repo.preload(rule, [:rule_conditions, :feature])
+
+    attrs
+    |> start_revision()
+    |> update_attrs(attrs)
+    |> Multi.update(:rule, fn %{
+                                        update_attrs: attrs,
+                                        rules_revision: rules_revision
+                                      } ->
+      rule_to_update =
+        if rules_revision do
+          Map.get(rules_revision, rule.id)
+        else
+          rule
+        end
+
+      Rule.changeset(rule_to_update, attrs)
+    end)
+    |> Repo.transact()
+  end
+
+  def delete_rule_with_revision(rule, attrs \\ %{}) do
+    rule =
+      Repo.preload(rule, [:rule_conditions, :feature])
+
+    attrs
+    |> start_revision()
+    |> Multi.delete(:rule, fn %{
+                                        rules_revision: rules_revision
+                                      } ->
+      if rules_revision do
+        Map.get(rules_revision, rule.id)
+      else
+        rule
+      end
+    end)
+    |> Repo.transact()
+  end
+
+  def publish_feature(feature) do
+    Multi.new()
+    |> Multi.run(:flag_unpublished, fn _, _ ->
+      query =
+        from f in Features.Feature,
+          where:
+            f.reference == ^feature.reference and
+              f.id != ^feature.id and f.status == :published
+
+      SavvyFlags.Repo.update_all(query, set: [status: :unpublished])
+
+      {:ok, :flag_unpublished}
+    end)
+    |> Multi.update(:feature, fn _ ->
+      Features.change_feature(feature, %{status: :published})
+    end)
+    |> Repo.transact()
+  end
+
+  defp start_revision(attrs) do
+    Multi.new()
+    |> get_initial_feature(attrs)
+    |> create_revision(attrs)
+    |> create_rules_revision(attrs)
+  end
+
+  defp get_initial_feature(multi, attrs) do
+    Multi.run(multi, :initial_feature, fn _repo, _changes ->
+      feature_id = SavvyFlags.Utils.get_value(attrs, :feature_id)
+
+      initial_feature =
+        Features.get_feature!(feature_id) |> Repo.preload(rules: :rule_conditions)
+
+      {:ok, initial_feature}
+    end)
+  end
+
+  defp create_revision(multi, attrs) do
+    Multi.run(multi, :revision, fn _repo, %{initial_feature: initial_feature} ->
+      with :published <- initial_feature.status,
+           {:ok, revision_feature} <- create_draft_revision(initial_feature, attrs) do
+        {:ok, revision_feature}
+      else
+        status when status == :draft -> {:ok, nil}
+      end
+    end)
+  end
+
+  def create_rules_revision(multi, _attrs) do
+    Multi.run(multi, :rules_revision, fn _repo,
+                                                 %{
+                                                   initial_feature: initial_feature,
+                                                   revision: revision
+                                                 } ->
+      if revision do
+        create_or_update_rules_for_revision(
+          revision,
+          initial_feature
+        )
+      else
+        {:ok, nil}
+      end
+    end)
+  end
+
+  defp update_attrs(multi, attrs) do
+    Multi.run(multi, :update_attrs, fn _repo, %{revision: revision} ->
+      if revision do
+        update_attrs = Map.put(attrs, "feature_id", revision.id)
+        {:ok, update_attrs}
+      else
+        {:ok, attrs}
+      end
+    end)
+  end
+
+  def create_draft_revision(feature, attrs) do
+    Features.create_feature(%{
+      key: feature.key,
+      reference: feature.reference,
+      environments_enabled: feature.environments_enabled,
+      default_value: %{
+        value: feature.default_value.value,
+        type: feature.default_value.type
+      },
+      project_id: feature.project_id,
+      description: feature.description,
+      revision: feature.revision + 1,
+      created_by_id: SavvyFlags.Utils.get_value(attrs, :current_user_id),
+      updated_by_id: SavvyFlags.Utils.get_value(attrs, :current_user_id)
+    })
+  end
+
+  def create_or_update_rules_for_revision(new_feature, old_feature) do
+    rules_for_revision =
+      Enum.reduce(old_feature.rules, %{}, fn rule, acc ->
+        {:ok, revision_rule} =
+          Features.create_rule(%{
+            "feature_id" => new_feature.id,
+            "description" => rule.description,
+            "environment_id" => rule.environment_id,
+            "scheduled" => rule.scheduled,
+            "scheduled_at" => rule.scheduled_at,
+            "value" => %{
+              "value" => rule.value.value,
+              "type" => rule.value.type
+            },
+            "rule_conditions" =>
+              Enum.map(rule.rule_conditions, fn frc ->
+                %{
+                  "type" => frc.type,
+                  "attribute_id" => frc.attribute_id,
+                  "position" => frc.position,
+                  "value" => frc.value
+                }
+              end),
+            "position" => rule.position
+          })
+
+        Map.put(acc, rule.id, revision_rule)
+      end)
+
+    {:ok, rules_for_revision}
+  end
+end
diff --git a/lib/savvy_flags_web/components/ui/badge.ex b/lib/savvy_flags_web/components/ui/badge.ex
index 4c470e7..5fc51c1 100644
--- a/lib/savvy_flags_web/components/ui/badge.ex
+++ b/lib/savvy_flags_web/components/ui/badge.ex
@@ -2,7 +2,7 @@ defmodule SavvyFlagsWeb.UI.Badge do
   use Phoenix.Component
 
   attr :value, :string, required: true
-  attr :variant, :string, values: ~w(code warning default), default: "default"
+  attr :variant, :string, values: ~w(code warning success default), default: "default"
   attr :size, :string, values: ~w(sm md lg), default: "md"
   attr :class, :string, default: nil
 
@@ -25,6 +25,7 @@ defmodule SavvyFlagsWeb.UI.Badge do
     case variant do
       "code" -> "border border-black-300 font-normal"
       "warning" -> "border border-amber-400 bg-amber-300"
+      "success" -> "border border-emerald-400 bg-emerald-300"
       _ -> "bg-neutral-200 text-neutral-900"
     end
   end
diff --git a/lib/savvy_flags_web/components/ui/button.ex b/lib/savvy_flags_web/components/ui/button.ex
index 09acfb3..120985a 100644
--- a/lib/savvy_flags_web/components/ui/button.ex
+++ b/lib/savvy_flags_web/components/ui/button.ex
@@ -41,7 +41,7 @@ defmodule SavvyFlagsWeb.UI.Button do
   defp size(size) do
     case size do
       "lg" -> "py-1.5 px-4"
-      "sm" -> "py-0.5 px-3 text-xs"
+      "sm" -> "py-1 px-3 text-xs"
     end
   end
 
@@ -51,7 +51,7 @@ defmodule SavvyFlagsWeb.UI.Button do
         "bg-emerald-300 border border-emerald-400 font-semibold hover:bg-emerald-400"
 
       "ghost" ->
-        "bg-transparent font-semibold bg-neutral-100 text-neutral-700 hover:bg-neutral-200"
+        "font-semibold bg-neutral-100 text-neutral-700 hover:bg-neutral-200"
 
       "secondary" ->
         "bg-white border text-black hover:bg-neutral-100"
@@ -60,7 +60,7 @@ defmodule SavvyFlagsWeb.UI.Button do
         "bg-red-300 hover:bg-red-400 text-black active:text-black/80"
 
       "warning" ->
-        "bg-amber-400 hover:bg-amber-500 text-black active:text-black/80 font-semibold"
+        "border border-amber-500 bg-amber-400 hover:bg-amber-500 text-black active:text-black/80 font-semibold"
 
       "outline" ->
         "border border-neutral-800 hover:border-neutral-900 hover:bg-neutral-100 active:text-black/80"
diff --git a/lib/savvy_flags_web/components/ui/input.ex b/lib/savvy_flags_web/components/ui/input.ex
index 81189df..fc85dd3 100644
--- a/lib/savvy_flags_web/components/ui/input.ex
+++ b/lib/savvy_flags_web/components/ui/input.ex
@@ -102,7 +102,7 @@ defmodule SavvyFlagsWeb.UI.Input do
       <select
         id={@id}
         name={@name}
-        class="mt-2 block w-full rounded py-2 border border-gray-300 bg-white shadow-sm focus:border-zinc-400 focus:ring-0 sm:text-sm focus:outline-neutral-800 focus:outline-2 focus:outline-offset-1"
+        class="mt-2 block w-full rounded py-2 border border-gray-300 bg-white shadow-sm focus:border-zinc-400 focus:ring-0 sm:text-sm focus:outline-neutral-800 focus:outline-2 focus:outline-offset-1 disabled:bg-gray-100 disabled:cursor-not-allowed"
         multiple={@multiple}
         {@rest}
       >
diff --git a/lib/savvy_flags_web/live/feature_live/components.ex b/lib/savvy_flags_web/live/feature_live/components.ex
index 707c0c1..3c20b8d 100644
--- a/lib/savvy_flags_web/live/feature_live/components.ex
+++ b/lib/savvy_flags_web/live/feature_live/components.ex
@@ -38,22 +38,32 @@ defmodule SavvyFlagsWeb.FeatureLive.Components do
               Last used at: <.stats feature={@feature} />
             </p>
           </div>
+          <div>
+            <p class="text-sm font-semibold mb-2">
+              Revision: <.badge value={"v#{@feature.revision}"} variant="code" /> -
+              <.badge :if={@feature.status == :draft} value={@feature.status} variant="warning" />
+              <.badge :if={@feature.status == :published} value={@feature.status} variant="success" />
+            </p>
+          </div>
         </div>
       </div>
       <div>
         <p>
-          <.button :if={@feature.status == :draft && @feature.revision == 0} variant="primary">
+          <.button
+            :if={@feature.status == :draft && @feature.revision == 0}
+            variant="primary"
+            phx-click="publish-revision"
+          >
             Publish
           </.button>
-          <p class="text-xs">No revision published yet</p>
         </p>
 
         <%= if @feature.status == :draft && @feature.revision != 0 do %>
           <p>
-            <.button variant="primary">
+            <.button variant="primary" phx-click="publish-revision" class="mr-2" size="sm">
               Publish revision
             </.button>
-            <.button variant="warning">
+            <.button variant="warning" phx-click="cancel-revision" size="sm">
               Cancel revision
             </.button>
           </p>
@@ -65,16 +75,18 @@ defmodule SavvyFlagsWeb.FeatureLive.Components do
 
   attr :feature, :map
   attr :environment, :map
+  attr :current_user, :map
 
   def feature_environment_detail(assigns) do
     ~H"""
-    <.list_rules feature={@feature} environment={@environment} />
+    <.list_rules feature={@feature} environment={@environment} current_user={@current_user} />
     """
   end
 
   attr :feature, :map
   attr :rules, :list
   attr :environment, :map
+  attr :current_user, :map
 
   def list_rules(assigns) do
     ~H"""
@@ -91,7 +103,12 @@ defmodule SavvyFlagsWeb.FeatureLive.Components do
       </div>
       <div phx-hook="Sortable" id="frc-list">
         <%= for rule <- @environment.rules do %>
-          <.rule feature={@feature} rule={rule} environment={@environment} />
+          <.rule
+            feature={@feature}
+            rule={rule}
+            environment={@environment}
+            current_user={@current_user}
+          />
         <% end %>
       </div>
     </div>
@@ -108,6 +125,7 @@ defmodule SavvyFlagsWeb.FeatureLive.Components do
   attr :feature, :map
   attr :rule, :map
   attr :environment, :map
+  attr :current_user, :map
 
   def rule(assigns) do
     scheduled_class = if(assigns[:rule].scheduled, do: "opacity-50")
@@ -129,6 +147,7 @@ defmodule SavvyFlagsWeb.FeatureLive.Components do
             id={@rule.reference || :new}
             rule={@rule}
             feature={@feature}
+            current_user={@current_user}
             environment={@environment}
           />
         </div>
diff --git a/lib/savvy_flags_web/live/feature_live/rule_component.ex b/lib/savvy_flags_web/live/feature_live/rule_component.ex
index 17976f4..01dcf6c 100644
--- a/lib/savvy_flags_web/live/feature_live/rule_component.ex
+++ b/lib/savvy_flags_web/live/feature_live/rule_component.ex
@@ -90,44 +90,22 @@ defmodule SavvyFlagsWeb.FeatureLive.RuleComponent do
     assign(socket, :form, to_form(changeset))
   end
 
-  @impl true
-  def handle_event("edit", _, socket) do
-    {:noreply, assign(socket, edit: true)}
-  end
-
-  @impl true
-  def handle_event("validate", %{"rule" => rule_params}, socket) do
-    scheduled = Map.get(rule_params, "scheduled")
-
-    rule_params =
-      Map.put(rule_params, "scheduled", if(scheduled == "on", do: true, else: false))
-
-    changeset =
-      socket.assigns.rule
-      |> Features.change_rule(rule_params)
-      |> Map.put(:action, :validate)
-
-    {:noreply, assign_form(socket, changeset)}
-  end
-
   @impl true
   def handle_event("delete-feature-rule", _, socket) do
     rule = socket.assigns.rule
-    Features.delete_rule(rule)
-    send(self(), {__MODULE__, {:deleted, rule}})
-    {:noreply, socket}
-  end
 
-  @impl true
-  def handle_event("save", %{"rule" => rule_params}, socket) do
-    rule = socket.assigns.rule
-    action = if rule.id, do: :edit, else: :new
-    scheduled = Map.get(rule_params, "scheduled")
-
-    rule_params =
-      Map.put(rule_params, "scheduled", if(scheduled == "on", do: true, else: false))
+    response =
+      Features.Revisions.delete_rule_with_revision(rule, %{
+        "feature_id" => rule.feature_id,
+        "current_user_id" => socket.assigns.current_user.id
+      })
 
-    save_rule(socket, action, rule_params)
+    case response do
+      {:ok, %{initial_feature: initial_feature, revision: revision}} ->
+        feature = if revision, do: revision, else: initial_feature
+        send(self(), {__MODULE__, {:deleted, feature}})
+        {:noreply, socket}
+    end
   end
 
   def handle_event("add-line", _, socket) do
@@ -178,70 +156,4 @@ defmodule SavvyFlagsWeb.FeatureLive.RuleComponent do
 
     {:noreply, socket}
   end
-
-  def handle_event("edit-feature-rule", _, socket) do
-    socket
-    |> assign(:edit_mode, true)
-    |> noreply()
-  end
-
-  def handle_event("cancel-edit-feature-rule", _, socket) do
-    %{rule: rule, environment: environment, feature: feature} = socket.assigns
-
-    socket =
-      if rule.id do
-        changeset =
-          Features.change_rule(rule, %{
-            "feature_id" => feature.id,
-            "environment_id" => environment.id
-          })
-
-        socket
-        |> assign(:edit_mode, false)
-        |> assign_form(changeset)
-      else
-        send(self(), {__MODULE__, {:deleted, rule}})
-        socket
-      end
-
-    socket
-    |> noreply()
-  end
-
-  defp save_rule(socket, :edit, rule_params) do
-    rule = socket.assigns.rule
-
-    case Features.update_rule(rule, rule_params) do
-      {:ok, rule} ->
-        send(self(), {__MODULE__, {:saved, rule}})
-
-        socket
-        |> put_flash(:info, "Feature rule updated successfully")
-        |> noreply()
-
-      {:error, %Ecto.Changeset{} = changeset} ->
-        socket
-        |> assign_form(changeset)
-        |> noreply()
-    end
-  end
-
-  defp save_rule(socket, :new, rule_params) do
-    %{feature: feature, environment: environment} = socket.assigns
-
-    rule_params =
-      Map.merge(rule_params, %{
-        "feature_id" => feature.id,
-        "environment_id" => environment.id
-      })
-
-    case Features.create_rule(rule_params) do
-      {:ok, rule} ->
-        send(self(), {__MODULE__, {:saved, rule}})
-        {:noreply, socket}
-
-      {:error, %Ecto.Changeset{} = changeset} ->
-        {:noreply, assign_form(socket, changeset)}
-    end
-  end
 end
diff --git a/lib/savvy_flags_web/live/feature_live/rule_form_component.ex b/lib/savvy_flags_web/live/feature_live/rule_form_component.ex
index 4fe2906..2ca6422 100644
--- a/lib/savvy_flags_web/live/feature_live/rule_form_component.ex
+++ b/lib/savvy_flags_web/live/feature_live/rule_form_component.ex
@@ -200,14 +200,6 @@ defmodule SavvyFlagsWeb.FeatureLive.RuleFormComponent do
     {:noreply, assign_form(socket, changeset)}
   end
 
-  @impl true
-  def handle_event("delete-feature-rule", _, socket) do
-    rule = socket.assigns.rule
-    Features.delete_rule(rule)
-    send(self(), {__MODULE__, {:deleted, rule}})
-    {:noreply, socket}
-  end
-
   @impl true
   def handle_event("save", %{"rule" => rule_params}, socket) do
     rule = socket.assigns.rule
@@ -277,9 +269,25 @@ defmodule SavvyFlagsWeb.FeatureLive.RuleFormComponent do
 
   defp save_rule(socket, :edit, rule_params) do
     rule = socket.assigns.rule
+    current_user = socket.assigns.current_user
+
+    rule_params =
+      Map.merge(rule_params, %{
+        "current_user_id" => current_user.id,
+        "feature_id" => rule.feature_id
+      })
+
+    case Features.Revisions.update_rule_with_revision(rule, rule_params) do
+      {:ok, %{rule: rule}} ->
+        rule =
+          SavvyFlags.Repo.preload(rule,
+            feature: [
+              :environments,
+              rules: [rule_conditions: :attribute],
+              stats: :environment
+            ]
+          )
 
-    case Features.update_rule(rule, rule_params) do
-      {:ok, rule} ->
         send(self(), {__MODULE__, {:saved, rule}})
 
         socket
@@ -295,16 +303,26 @@ defmodule SavvyFlagsWeb.FeatureLive.RuleFormComponent do
   end
 
   defp save_rule(socket, :new, rule_params) do
-    %{feature: feature, environment: environment} = socket.assigns
+    %{feature: feature, environment: environment, current_user: current_user} = socket.assigns
 
     rule_params =
       Map.merge(rule_params, %{
         "feature_id" => feature.id,
-        "environment_id" => environment.id
+        "environment_id" => environment.id,
+        "current_user_id" => current_user.id
       })
 
-    case Features.create_rule(rule_params) do
-      {:ok, rule} ->
+    case Features.Revisions.create_rule_with_revision(rule_params) do
+      {:ok, %{rule: rule}} ->
+        rule =
+          SavvyFlags.Repo.preload(rule,
+            feature: [
+              :environments,
+              rules: [rule_conditions: :attribute],
+              stats: :environment
+            ]
+          )
+
         send(self(), {__MODULE__, {:saved, rule}})
 
         socket
diff --git a/lib/savvy_flags_web/live/feature_live/form_component.ex b/lib/savvy_flags_web/live/feature_live/form_component.ex
index 9581a31..130100f 100644
--- a/lib/savvy_flags_web/live/feature_live/form_component.ex
+++ b/lib/savvy_flags_web/live/feature_live/form_component.ex
@@ -29,21 +29,30 @@ defmodule SavvyFlagsWeb.FeatureLive.FormComponent do
           }
         />
         <.input field={@form[:description]} label="Description" />
-        <.input field={@form[:project_id]} label="Project *" options={@form_projects} type="select" />
+        <.input
+          :if={@action == :new}
+          field={@form[:project_id]}
+          label="Project *"
+          options={@form_projects}
+          type="select"
+        />
         <.inputs_for :let={f_default_value} field={@form[:default_value]}>
           <.input
+            :if={@action == :new}
             field={f_default_value[:type]}
             label="Value type"
             options={SavvyFlags.Features.Feature.value_types()}
             type="select"
           />
-          <%= if f_default_value[:type].value == :boolean do %>
-            <div>
-              <.label>Default value</.label>
-              <.input field={f_default_value[:value]} label="Active?" type="checkbox" />
-            </div>
-          <% else %>
-            <.input field={f_default_value[:value]} label="Default value" />
+          <%= if @action == :new do %>
+            <%= if f_default_value[:type].value == :boolean do %>
+              <div>
+                <.label>Default value</.label>
+                <.input field={f_default_value[:value]} label="Active?" type="checkbox" />
+              </div>
+            <% else %>
+              <.input field={f_default_value[:value]} label="Default value" />
+            <% end %>
           <% end %>
         </.inputs_for>
 
@@ -100,7 +109,15 @@ defmodule SavvyFlagsWeb.FeatureLive.FormComponent do
   end
 
   defp save_feature(socket, :edit, feature_params) do
-    case Features.update_feature(socket.assigns.feature, feature_params) do
+    feature = socket.assigns.feature
+
+    feature_params =
+      Map.put(feature_params, "default_value", %{
+        "type" => feature.default_value.type,
+        "value" => feature.default_value.value
+      })
+
+    case Features.update_feature(socket.assigns.feature, feature_params) |> dbg() do
       {:ok, feature} ->
         notify_parent({:saved, feature})
 
diff --git a/lib/savvy_flags_web/live/feature_live/index.ex b/lib/savvy_flags_web/live/feature_live/index.ex
index 1c95640..5106272 100644
--- a/lib/savvy_flags_web/live/feature_live/index.ex
+++ b/lib/savvy_flags_web/live/feature_live/index.ex
@@ -65,7 +65,7 @@ defmodule SavvyFlagsWeb.FeatureLive.Index do
       }
     >
       <:col :let={{_, feature}} label="Key">
-        <.badge value={feature.key} />
+        <.badge value={feature.key} /> <.badge value={"v#{feature.revision}"} variant="code" />
         <%= if feature.archived_at do %>
           <.badge variant="warning" class="ml-3" value="Archived" size="sm" />
         <% end %>
diff --git a/lib/savvy_flags_web/live/feature_live/show.ex b/lib/savvy_flags_web/live/feature_live/show.ex
index 41cdefe..5ac721e 100644
--- a/lib/savvy_flags_web/live/feature_live/show.ex
+++ b/lib/savvy_flags_web/live/feature_live/show.ex
@@ -16,29 +16,21 @@ defmodule SavvyFlagsWeb.FeatureLive.Show do
     ~H"""
     <.breadcrumb>
       <:items><.link navigate={~p"/features"}>Features</.link></:items>
-      <:items :if={!@environment}><.badge value={@feature.key} /></:items>
+      <:items :if={!@environment}>
+        <.badge value={@feature.key} />
+      </:items>
       <:items :if={@environment}>
         <.link :if={@environment} patch={~p"/features/#{@feature}"}>
-          <.badge value={@feature.key} />
+          <.badge value={@feature.key} /><span class="text-xs">{@feature.status}</span>
         </.link>
       </:items>
       <:items :if={@environment}>
-        <span
-          class=" h-3 w-3 inline-block rounded-sm"
-          style={"background-color: #{@environment.color}"}
-        >
-        </span>
         <span class="capitalize">{@environment.name}</span>
-        <.tag :if={@environment.id in @feature.environments_enabled} variant="success" class="ml-3">
-          Active
-        </.tag>
-        <.tag
-          :if={@environment.id not in @feature.environments_enabled}
-          variant="neutral"
-          class="ml-3"
-        >
-          Inactive
-        </.tag>
+        <%!-- <%= if @environment.id in @feature.environments_enabled do %>
+          <.badge variant="success" class="ml-3" value="Active" />
+        <% else %>
+          <.badge class="ml-3" value="Inactive" />
+        <% end %> --%>
       </:items>
       <:actions :if={@environment}>
         <form
@@ -67,6 +59,7 @@ defmodule SavvyFlagsWeb.FeatureLive.Show do
           :if={@environment}
           feature={@feature}
           environment={@environment}
+          current_user={@current_user}
         />
       </div>
       <div class="-mt-4">
@@ -88,6 +81,7 @@ defmodule SavvyFlagsWeb.FeatureLive.Show do
         rule={@rule}
         environment={@environment}
         feature={@feature}
+        current_user={@current_user}
         patch={~p"/features/#{@feature}/environments/#{@environment}"}
       />
     </.modal>
@@ -227,25 +221,57 @@ defmodule SavvyFlagsWeb.FeatureLive.Show do
   end
 
   @impl true
-  def handle_info(
-        {SavvyFlagsWeb.FeatureLive.RuleComponent, {:deleted, rule}},
+  def handle_event("cancel-revision", %{}, socket) do
+    feature = socket.assigns.feature
+    feature_reference = feature.reference
+    SavvyFlags.Repo.delete(feature)
+
+    feature =
+      Features.get_feature_by_reference(feature_reference)
+
+    socket
+    |> assign(:feature, feature)
+    |> refresh()
+    |> noreply()
+  end
+
+  @impl true
+  def handle_event("publish-revision", %{}, socket) do
+    feature = socket.assigns.feature
+
+    case Features.Revisions.publish_feature(feature) do
+      {:ok, %{feature: feature}} ->
         socket
-      ) do
-    socket = refresh(socket)
+        |> assign(:feature, feature)
+        |> refresh()
+        |> noreply()
 
-    socket =
-      if rule.id do
-        put_flash(socket, :info, "Feature Rule correctly deleted")
-      else
+      {:error, _changeset} ->
         socket
-      end
+        |> put_flash(:error, "Failed to publish feature")
+        |> noreply()
+    end
+  end
 
-    noreply(socket)
+  @impl true
+  def handle_info(
+        {SavvyFlagsWeb.FeatureLive.RuleComponent, {:deleted, feature}},
+        socket
+      ) do
+    socket
+    |> assign(:feature, feature)
+    |> refresh()
+    |> put_flash(:info, "Feature Rule correctly deleted")
+    |> noreply()
   end
 
   @impl true
-  def handle_info({SavvyFlagsWeb.FeatureLive.RuleFormComponent, {:saved, _}}, socket) do
+  def handle_info(
+        {SavvyFlagsWeb.FeatureLive.RuleFormComponent, {:saved, rule}},
+        socket
+      ) do
     socket
+    |> assign(:feature, rule.feature)
     |> refresh()
     |> noreply()
   end
diff --git a/mix.exs b/mix.exs
index 2c06d1c..65a40d5 100644
--- a/mix.exs
+++ b/mix.exs
@@ -19,7 +19,8 @@ defmodule SavvyFlags.MixProject do
         "coveralls.detail": :test,
         "coveralls.post": :test,
         "coveralls.html": :test,
-        "coveralls.cobertura": :test
+        "coveralls.cobertura": :test,
+        "test.watch": :test
       ],
       listeners: listeners(),
       compilers: [:phoenix_live_view] ++ Mix.compilers()
@@ -114,7 +115,10 @@ defmodule SavvyFlags.MixProject do
       {:logger_json, "~> 7.0"},
 
       # Rate limiting
-      {:hammer, "~> 7.0"}
+      {:hammer, "~> 7.0"},
+
+      # testing
+      {:mix_test_watch, "~> 1.0", only: [:dev, :test], runtime: false}
     ]
   end
 
diff --git a/mix.lock b/mix.lock
index 43dc6c4..0645a07 100644
--- a/mix.lock
+++ b/mix.lock
@@ -40,6 +40,7 @@
   "mimerl": {:hex, :mimerl, "1.4.0", "3882a5ca67fbbe7117ba8947f27643557adec38fa2307490c4c4207624cb213b", [:rebar3], [], "hexpm", "13af15f9f68c65884ecca3a3891d50a7b57d82152792f3e19d88650aa126b144"},
   "mint": {:hex, :mint, "1.7.1", "113fdb2b2f3b59e47c7955971854641c61f378549d73e829e1768de90fc1abf1", [:mix], [{:castore, "~> 0.1.0 or ~> 1.0", [hex: :castore, repo: "hexpm", optional: true]}, {:hpax, "~> 0.1.1 or ~> 0.2.0 or ~> 1.0", [hex: :hpax, repo: "hexpm", optional: false]}], "hexpm", "fceba0a4d0f24301ddee3024ae116df1c3f4bb7a563a731f45fdfeb9d39a231b"},
   "mix_audit": {:hex, :mix_audit, "2.1.5", "c0f77cee6b4ef9d97e37772359a187a166c7a1e0e08b50edf5bf6959dfe5a016", [:make, :mix], [{:jason, "~> 1.4", [hex: :jason, repo: "hexpm", optional: false]}, {:yaml_elixir, "~> 2.11", [hex: :yaml_elixir, repo: "hexpm", optional: false]}], "hexpm", "87f9298e21da32f697af535475860dc1d3617a010e0b418d2ec6142bc8b42d69"},
+  "mix_test_watch": {:hex, :mix_test_watch, "1.3.0", "2ffc9f72b0d1f4ecf0ce97b044e0e3c607c3b4dc21d6228365e8bc7c2856dc77", [:mix], [{:file_system, "~> 0.2 or ~> 1.0", [hex: :file_system, repo: "hexpm", optional: false]}], "hexpm", "f9e5edca976857ffac78632e635750d158df14ee2d6185a15013844af7570ffe"},
   "murmur": {:hex, :murmur, "2.0.0", "ffd64af879014b51c449aec38e2d460547270b88280f052cecda0a0ce4589188", [:mix], [], "hexpm", "2e96baf65a1a8b5af82ee509d6089ddf717af7e8ce0ed80d4c53819ca2fc2ffd"},
   "nimble_options": {:hex, :nimble_options, "1.1.1", "e3a492d54d85fc3fd7c5baf411d9d2852922f66e69476317787a7b2bb000a61b", [:mix], [], "hexpm", "821b2470ca9442c4b6984882fe9bb0389371b8ddec4d45a9504f00a66f650b44"},
   "nimble_pool": {:hex, :nimble_pool, "1.1.0", "bf9c29fbdcba3564a8b800d1eeb5a3c58f36e1e11d7b7fb2e084a643f645f06b", [:mix], [], "hexpm", "af2e4e6b34197db81f7aad230c1118eac993acc0dae6bc83bac0126d4ae0813a"},
diff --git a/priv/repo/migrations/20250902051817_add_status_to_features.exs b/priv/repo/migrations/20250902051817_add_status_to_features.exs
index b444b98..5a85fc0 100644
--- a/priv/repo/migrations/20250902051817_add_status_to_features.exs
+++ b/priv/repo/migrations/20250902051817_add_status_to_features.exs
@@ -8,5 +8,10 @@ defmodule SavvyFlags.Repo.Migrations.AddStatusToFeatures do
       add :created_by_id, references(:users, on_delete: :nilify_all)
       add :updated_by_id, references(:users, on_delete: :nilify_all)
     end
+
+    drop unique_index(:features, [:key])
+    drop unique_index(:features, [:reference])
+    create unique_index(:features, [:key, :status, :revision])
+    create unique_index(:features, [:key, :reference, :revision])
   end
 end
diff --git a/priv/repo/seeds.exs b/priv/repo/seeds.exs
index 22277b2..d87d02c 100644
--- a/priv/repo/seeds.exs
+++ b/priv/repo/seeds.exs
@@ -17,82 +17,62 @@ if System.get_env("SEED") do
     }
     |> Accounts.register_user()
 
-  {:ok, _} =
-    Features.create_feature(%{
-      created_by_id: user.id,
-      updated_by_id: user.id,
-      archived_at: DateTime.utc_now(),
-      key: "myapp:nav_color",
-      description: "Change navbar color",
-      project_id: List.first(projects).id,
-      default_value: %{type: :boolean, value: "false"}
-    })
-
   email_attribute = Repo.get_by(Attributes.Attribute, name: "email")
 
   {:ok, feature} =
     Features.create_feature(%{
-      created_by_id: user.id,
-      updated_by_id: user.id,
-      key: "myapp:change_cta_button",
-      description: "Change wording of the CTA Signup",
-      project_id: List.first(projects).id,
-      environments_enabled: [List.first(environments).id],
-      default_value: %{type: :boolean, value: "false"}
+      "created_by_id" => user.id,
+      "updated_by_id" => user.id,
+      "key" => "myapp:change_cta_button",
+      "description" => "Change wording of the CTA Signup",
+      "project_id" => List.first(projects).id,
+      "environments_enabled" => [List.first(environments).id],
+      "default_value" => %{"type" => :boolean, "value" => "false"},
+      "status" => :draft
     })
 
   {:ok, _} =
     Features.create_rule(%{
-      feature_id: feature.id,
-      description: "Activate for gmail users",
-      value: %{type: :boolean, value: "true"},
-      environment_id: List.first(environments).id,
-      rule_conditions: [
+      "feature_id" => feature.id,
+      "description" => "Activate for gmail users",
+      "value" => %{type: :boolean, value: "true"},
+      "environment_id" => List.first(environments).id,
+      "rule_conditions" => [
         %{
-          position: 1,
-          attribute_id: email_attribute.id,
-          type: :match_regex,
-          value: ".*\.example.com$"
+          "position" => 1,
+          "attribute_id" => email_attribute.id,
+          "type" => :match_regex,
+          "value" => ".*\.example.com$"
         }
       ]
     })
 
   {:ok, feature2} =
     Features.create_feature(%{
-      created_by_id: user.id,
-      updated_by_id: user.id,
-      key: "myapp:color_nav",
-      description: "AB test nav color by default red",
-      project_id: List.first(projects).id,
-      default_value: %{type: :string, value: "red"}
+      "created_by_id" => user.id,
+      "updated_by_id" => user.id,
+      "key" => "myapp:color_nav",
+      "description" => "AB test nav color by default red",
+      "project_id" => List.first(projects).id,
+      "default_value" => %{"type" => :string, "value" => "red"}
     })
 
   {:ok, _} =
     Features.create_rule(%{
-      feature_id: feature2.id,
-      description: "Activate for example users",
-      value: %{type: :string, value: "green"},
-      environment_id: List.first(environments).id,
-      rule_conditions: [
+      "feature_id" => feature2.id,
+      "description" => "Activate for example users",
+      "value" => %{type: :string, value: "green"},
+      "environment_id" => List.first(environments).id,
+      "rule_conditions" => [
         %{
-          position: 1,
-          attribute_id: email_attribute.id,
-          type: :match_regex,
-          value: ".*\.example.com$"
+          "position" => 1,
+          "attribute_id" => email_attribute.id,
+          "type" => :match_regex,
+          "value" => ".*\.example.com$"
         }
       ]
     })
 
-  {:ok, _} =
-    Features.create_feature(%{
-      created_by_id: user.id,
-      updated_by_id: user.id,
-      key: "myapp:new_profile",
-      description: "Rollout our new profile page",
-      project_id: List.last(projects).id,
-      default_value: %{type: :boolean, value: "false"}
-    })
-
   {:ok, _} =
     SdkConnections.create_sdk_connection(%{
       name: "Production",
diff --git a/test/savvy_flags/features/revisions_test.exs b/test/savvy_flags/features/revisions_test.exs
new file mode 100644
index 0000000..aebb1fa
--- /dev/null
+++ b/test/savvy_flags/features/revisions_test.exs
@@ -0,0 +1,286 @@
+defmodule SavvyFlags.Features.RevisionsTest do
+  alias SavvyFlags.Features.Feature
+  use SavvyFlags.DataCase, async: true
+
+  alias SavvyFlags.Features.Revisions
+  alias SavvyFlags.Features.Rule
+
+  import SavvyFlags.AccountsFixtures
+  import SavvyFlags.FeaturesFixtures
+  import SavvyFlags.ProjectsFixtures
+  import SavvyFlags.AttributesFixtures
+  import SavvyFlags.EnvironmentsFixtures
+
+  setup do
+    user = user_fixture()
+    attribute = attribute_fixture()
+    environment = environment_fixture()
+    project = project_fixture()
+
+    active_feature =
+      SavvyFlags.FeaturesFixtures.feature_fixture(%{
+        created_by_id: user.id,
+        updated_by_id: user.id,
+        key: "test",
+        project_id: project.id,
+        default_value: %{
+          value: "false",
+          type: :boolean
+        },
+        status: :active,
+        revision: 0
+      })
+
+    active_rule =
+      rule_fixture(%{
+        description: "test feature rule",
+        feature_id: active_feature.id,
+        environment_id: environment.id,
+        value: %{
+          value: "true",
+          type: active_feature.default_value.type
+        },
+        rule_conditions: [
+          %{position: 1, attribute_id: attribute.id, type: :equal, value: "10"}
+        ]
+      })
+
+    draft_feature =
+      SavvyFlags.FeaturesFixtures.feature_fixture(%{
+        created_by_id: user.id,
+        updated_by_id: user.id,
+        key: "test",
+        project_id: project.id,
+        default_value: %{
+          value: "false",
+          type: :boolean
+        },
+        status: :draft,
+        revision: 0
+      })
+
+    draft_rule =
+      rule_fixture(%{
+        description: "test feature rule",
+        feature_id: draft_feature.id,
+        environment_id: environment.id,
+        value: %{
+          value: "true",
+          type: draft_feature.default_value.type
+        },
+        rule_conditions: [
+          %{position: 1, attribute_id: attribute.id, type: :equal, value: "10"}
+        ]
+      })
+
+    %{
+      active_feature: active_feature,
+      active_rule: active_rule,
+      environment: environment,
+      attribute: attribute,
+      user: user,
+      draft_feature: draft_feature,
+      draft_rule: draft_rule
+    }
+  end
+
+  describe "update_feature_with_revision/2" do
+    test "must create revision w/ feature + update feature", %{
+      active_feature: active_feature,
+      user: user
+    } do
+      assert {:ok, %{feature: feature}} =
+               Revisions.update_feature_with_revision(active_feature, %{
+                 "current_user_id" => user.id,
+                 "description" => "updated description"
+               })
+
+      assert feature.description == "updated description"
+      assert feature.revision == 1
+      assert feature.id != active_feature.id
+    end
+  end
+
+  describe "create_rule_with_revision/1" do
+    test "must create revision w/ feature rule + create a new feature rule", %{
+      active_feature: active_feature,
+      environment: environment,
+      attribute: attribute,
+      user: user,
+      active_rule: active_rule
+    } do
+      assert SavvyFlags.Repo.aggregate(Feature, :count, :id) == 2
+
+      assert {:ok,
+              %{
+                initial_feature: initial_feature,
+                revision: revision,
+                rules_revision: rules_revision,
+                rule: new_rule
+              }} =
+               Revisions.create_rule_with_revision(%{
+                 "current_user_id" => user.id,
+                 "feature_id" => active_feature.id,
+                 "description" => "new rule",
+                 "environment_id" => environment.id,
+                 "value" => %{
+                   "value" => "true",
+                   "type" => :boolean
+                 },
+                 "rule_conditions" => [
+                   %{
+                     "position" => 2,
+                     "attribute_id" => attribute.id,
+                     "type" => :equal,
+                     "value" => "20"
+                   }
+                 ]
+               })
+
+      assert SavvyFlags.Repo.aggregate(Feature, :count, :id) == 3
+      assert %Rule{} = Map.get(rules_revision, active_rule.id)
+      assert new_rule.feature_id == revision.id
+      assert new_rule.description == "new rule"
+      feature = SavvyFlags.Repo.preload(revision, :rules)
+      assert feature.rules |> Enum.count() == 2
+      assert revision.revision == 1
+      assert revision.key == feature.key
+      assert initial_feature.id != revision.id
+    end
+
+    test "if feature draft must create feature rule w/o revision", %{
+      draft_feature: draft_feature,
+      environment: environment,
+      attribute: attribute,
+      user: user
+    } do
+      assert SavvyFlags.Repo.aggregate(Feature, :count, :id) == 2
+      assert SavvyFlags.Repo.aggregate(Rule, :count, :id) == 2
+
+      assert {:ok,
+              %{
+                initial_feature: initial_feature,
+                revision: nil,
+                rules_revision: nil,
+                rule: new_rule
+              }} =
+               Revisions.create_rule_with_revision(%{
+                 "current_user_id" => user.id,
+                 "feature_id" => draft_feature.id,
+                 "description" => "new rule",
+                 "environment_id" => environment.id,
+                 "value" => %{
+                   "value" => "true",
+                   "type" => :boolean
+                 },
+                 "rule_conditions" => [
+                   %{
+                     "position" => 2,
+                     "attribute_id" => attribute.id,
+                     "type" => :equal,
+                     "value" => "20"
+                   }
+                 ]
+               })
+
+      assert SavvyFlags.Repo.aggregate(Rule, :count, :id) == 3
+      assert new_rule.feature_id == draft_feature.id
+      assert new_rule.feature_id == initial_feature.id
+    end
+  end
+
+  describe "update_rule_with_revision/2" do
+    test "if feature active must create revision w/ feature rule + update feature rule", %{
+      active_feature: active_feature,
+      environment: environment,
+      attribute: attribute,
+      user: user,
+      active_rule: active_rule
+    } do
+      assert SavvyFlags.Repo.aggregate(Feature, :count, :id) == 2
+
+      assert {:ok,
+              %{
+                initial_feature: initial_feature,
+                revision: revision,
+                rules_revision: rules_revision,
+                rule: new_rule
+              }} =
+               Revisions.update_rule_with_revision(active_rule, %{
+                 "current_user_id" => user.id,
+                 "feature_id" => active_feature.id,
+                 "description" => "new rule",
+                 "environment_id" => environment.id,
+                 "value" => %{
+                   "value" => "true",
+                   "type" => :boolean
+                 },
+                 "rule_conditions" => [
+                   %{
+                     "position" => 2,
+                     "attribute_id" => attribute.id,
+                     "type" => :equal,
+                     "value" => "20"
+                   }
+                 ]
+               })
+
+      assert SavvyFlags.Repo.aggregate(Feature, :count, :id) == 3
+      assert %Rule{} = Map.get(rules_revision, active_rule.id)
+      assert new_rule.feature_id == revision.id
+      assert new_rule.description == "new rule"
+      feature = SavvyFlags.Repo.preload(revision, rules: :rule_conditions)
+      assert feature.rules |> Enum.count() == 1
+      assert [fr] = feature.rules
+      assert fr.description == "new rule"
+      assert fr.rule_conditions |> Enum.count() == 1
+      assert [frc] = fr.rule_conditions
+      assert frc.attribute_id == attribute.id
+      assert frc.type == :equal
+      assert frc.value == "20"
+      assert revision.revision == 1
+      assert revision.key == feature.key
+      assert initial_feature.id != revision.id
+    end
+
+    test "if feature draft must update current feature rule w/o revision", %{
+      draft_feature: draft_feature,
+      environment: environment,
+      attribute: attribute,
+      user: user,
+      draft_rule: draft_rule
+    } do
+      assert SavvyFlags.Repo.aggregate(Feature, :count, :id) == 2
+
+      assert {:ok,
+              %{
+                initial_feature: _initial_feature,
+                revision: nil,
+                rules_revision: nil,
+                rule: new_rule
+              }} =
+               Revisions.update_rule_with_revision(draft_rule, %{
+                 "current_user_id" => user.id,
+                 "feature_id" => draft_feature.id,
+                 "description" => "new rule",
+                 "environment_id" => environment.id,
+                 "value" => %{
+                   "value" => "true",
+                   "type" => :boolean
+                 },
+                 "rule_conditions" => [
+                   %{
+                     "position" => 2,
+                     "attribute_id" => attribute.id,
+                     "type" => :equal,
+                     "value" => "20"
+                   }
+                 ]
+               })
+
+      assert SavvyFlags.Repo.aggregate(Feature, :count, :id) == 2
+      assert draft_rule.id == new_rule.id
+      assert new_rule.description == "new rule"
+    end
+  end
+end
diff --git a/test/savvy_flags_web/controllers/api/feature_controller_test.exs b/test/savvy_flags_web/controllers/api/feature_controller_test.exs
index cfeb983..d087bb1 100644
--- a/test/savvy_flags_web/controllers/api/feature_controller_test.exs
+++ b/test/savvy_flags_web/controllers/api/feature_controller_test.exs
@@ -15,7 +15,9 @@ defmodule SavvyFlagsWeb.Api.FeatureControllerTest do
         key: "myapp:nav-v2",
         project_id: project.id,
         environments_enabled: [environment.id],
-        default_value: %{type: :boolean, value: "false"}
+        default_value: %{type: :boolean, value: "false"},
+        status: :active,
+        revision: 1
       })
 
     SavvyFlags.FeaturesFixtures.rule_fixture(%{
